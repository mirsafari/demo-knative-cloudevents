package main

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"time"

	cloudevents "github.com/cloudevents/sdk-go/v2"
)

var cloudEventEndpoitService string

func main() {
	repository := "prometheus/prometheus"
	provider := "github.com"
	// cloudEventEndpoitService = "http://localhost:8080/"
	// Read ENV variable
	cloudEventEndpoitService = os.Getenv("CLOUDEVENT_DESTINATION")

	err := getReleases(provider, repository)
	if err != nil {
		fmt.Println("error_occured", err)
		os.Exit(2)
	}
	fmt.Println("cloudevent_successfuly_sent")
}
func getReleases(provider string, repository string) error {
	// Call the forgeUrl() function to create the request URL based on the provider
	url, err := forgeUrl(provider, repository)
	if err != nil {
		return err
	}

	// Create the request
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return err
	}
	req.Header.Add("Accept", "application/vnd.github.v3+json")

	// Try to send the request
	client := &http.Client{Timeout: time.Second * 10}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	// Try to read response
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	// Return error if response is not HTTP 200
	if resp.StatusCode != 200 {
		return errors.New("HTTP response code is" + string(resp.StatusCode) + " " + string(body))
	}

	// Save response to struct so it can be used for processing the data
	releaseData := AutoGenerated{}
	json.Unmarshal([]byte(body), &releaseData)

	// Send only for full release. Response should have both values false by default, this is additional check
	if releaseData.Prerelease && releaseData.Draft {
		return errors.New("latest_release_is_marked_as_pre-release/draft_ignoring_the_release")
	}

	// Create cloudevent by passing the provider, repository and latest tag
	err = sendCloudevent(provider, repository, releaseData)
	if err != nil {
		return err
	}

	return nil
}

func forgeUrl(provider string, repository string) (string, error) {
	if provider == "github.com" {
		return "https://api.github.com/repos/" + repository + "/releases/latest", nil
	}

	return "", errors.New("provider_not_supported")
}

func sendCloudevent(provider string, repository string, releaseData AutoGenerated) error {
	// Create request
	c, err := cloudevents.NewClientHTTP()
	if err != nil {
		return err
	}

	// Get hostname of pod so it can be set as source
	podName, err := os.Hostname()
	if err != nil {
		return err
	}

	// Create an Event.
	event := cloudevents.NewEvent()
	event.SetSource(podName)
	event.SetType(provider + ".release")
	event.SetData(cloudevents.ApplicationJSON, map[string]string{
		"repository":   repository,
		"version":      releaseData.TagName,
		"published_at": releaseData.PublishedAt.String(),
	})

	// Set a target.
	ctx := cloudevents.ContextWithTarget(context.Background(), cloudEventEndpoitService)

	// Send that Event. Check for errors
	if result := c.Send(ctx, event); cloudevents.IsUndelivered(result) || string(result.Error()) != "200: " {
		return result
	}
	return nil
}

type AutoGenerated struct {
	TagName         string    `json:"tag_name"`
	TargetCommitish string    `json:"target_commitish"`
	Name            string    `json:"name"`
	Draft           bool      `json:"draft"`
	Prerelease      bool      `json:"prerelease"`
	CreatedAt       time.Time `json:"created_at"`
	PublishedAt     time.Time `json:"published_at"`
}
